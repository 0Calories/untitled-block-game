type Query {
  me: User!
  myCharacter: Character!
  getCharacter(id: Int!): Character!
  getCharacters(query: String): [Character]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
  login(data: LoginInput!): AuthPayload!

  updateCharacter(data: UpdateCharacterInput!): Character!

  createWorld(data: CreateWorldInput!): World!
  updateWorld(data: UpdateWorldInput!): World!
  deleteWorld(worldId: Int!): World!
  setHomeWorld(worldId: Int!): World!

  visitWorld(worldId: Int!): World!
}

# type Subscription {

# }

type AuthPayload {
  token: String!
  user: User!
  character: Character!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  username: String
  email: String
  password: String
}

input LoginInput {
  email: String
  username: String
  password: String!
}

input CreateWorldInput {
  name: String!
  description: String
}

input UpdateWorldInput {
  worldId: Int!
  name: String
  description: String
}

input UpdateCharacterInput {
  name: String
  bio: String
  colour: String
}

type User {
  id: Int!
  username: String!
  email: String
  password: String
}

type Character {
  id: Int
  joinDate: String
  colour: String!
  bobux: Int!
  name: String!
  bio: String
  homeWorldId: Int
  worlds: [World]
  visitedWorlds: [World]
}

type World {
  id: Int!
  name: String!
  description: String
  visits: Int
  likes: Int
  dislikes: Int
  creator: Character!
  visitors: [Character]
  createdAt: String!
  updatedAt: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
